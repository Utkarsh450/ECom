const mongoose = require('mongoose');
const Joi = require('joi');

// Delivery Schema for Mongoose with validation constraints
const deliverySchema = mongoose.Schema({
    order: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'order',
        required: true,
        unique: true,
    },
    deliveryBoy: {
        type: String,
        required: true,
        minlength: 3,
        maxlength: 50,
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'in-transit', 'delivered', 'cancelled'], // Restrict to specific statuses
    },
    trackingURL: {
        type: String,
        match: /^https?:\/\/[^\s]+$/, // Regex for a valid URL format
    },
    estimatedDeliveryTime: {
        type: Number,
        min: 0, // Cannot be negative
    },
}, { timestamps: true });

// Joi Validation Schema for Delivery Data
const validateDelivery = (data) => {
    const schema = Joi.object({
        order: Joi.string().required(), // Expecting a valid ObjectId as a string
        deliveryBoy: Joi.string().min(3).max(50).required(),
        status: Joi.string().valid('pending', 'in-transit', 'delivered', 'cancelled').required(),
        trackingURL: Joi.string().uri(), // Ensures a valid URL
        estimatedDeliveryTime: Joi.number().min(0).optional(), // Non-negative integer, optional
    });

    return schema.validate(data);
};

// Export both Mongoose Model and Joi Validation function
const Delivery = mongoose.model('Delivery', deliverySchema);

module.exports = {
    Delivery,
    validateDelivery,
};
