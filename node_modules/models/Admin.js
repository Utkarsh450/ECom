const mongoose = require('mongoose');
const Joi = require('joi');

// Admin Schema for Mongoose with validation constraints and regex
const AdminSchema = mongoose.Schema({
    name: {
        type: String,
        required: true,
        minlength: 3,
        maxlength: 30,
    },
    email: {
        type: String,
        required: true,
        match: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, // Regex to validate email format
    },
    password: {
        type: String,
        required: true,
        minlength: 6,
        maxlength: 60,
    },
    role: {
        type: String,
        required: true,
        enum: ['admin', 'superadmin', 'moderator'], // Optional: Limit role to specific values
    },
}, { timestamps: true });

// Joi Validation Schema for Admin Data with regex patterns
const validateAdmin = (data) => {
    const schema = Joi.object({
        name: Joi.string().min(3).max(30).required(),
        email: Joi.string().email().required().pattern(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/), // Email format
        password: Joi.string().min(6).max(30).required(), // Password format with letter and digit
        role: Joi.string().valid('admin', 'superadmin', 'moderator').required(), // Optional: Specific roles
    });

    return schema.validate(data);
};

// Export both Mongoose Model and Joi Validation function
const Admin = mongoose.model('Admin', AdminSchema);

module.exports = {
    Admin,
    validateAdmin,
};
