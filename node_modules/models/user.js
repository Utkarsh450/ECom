const mongoose = require('mongoose');
const Joi = require('joi');

// Address Subschema for Mongoose with regex and constraints as required
const AddressSchema = mongoose.Schema({
    state: { type: String, required: true, minlength: 2, maxlength: 50 },
    zip: { type: Number, required: true, min: 100000, max: 999999 }, // Assuming a 6-digit zip code for example
    city: { type: String, required: true, minlength: 2, maxlength: 50 },
    address: { type: String, required: true, minlength: 5, maxlength: 100 },
});

// User Schema for Mongoose with regex for specific fields
const userSchema = mongoose.Schema({
    name: {
        type: String,
        required: true,
        unique: true,
        minlength: 3,
        maxlength: 30,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        match: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, // Regex to validate email format
    },
    password: {
        type: String,
        // required: true,
        minlength: 6,
        maxlength: 30,
        match: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/, // Regex for password with at least one letter and one digit
    },
    addresses: {
        type: [AddressSchema],
        required: true,
    },
    phone: {
        type: String,
        // required: true,
        unique: true,
        match: /^[0-9]{10,15}$/, // Regex for phone number with 10-15 digits
    },
}, { timestamps: true });

// Joi Validation Schema for User Data with regex patterns for each field
const validateUser = (data) => {
    const addressSchema = Joi.object({
        state: Joi.string().min(2).max(50).required(),
        zip: Joi.number().min(100000).max(999999).required(),
        city: Joi.string().min(2).max(50).required(),
        address: Joi.string().min(5).max(100).required(),
    });

    const schema = Joi.object({
        name: Joi.string().min(3).max(30).required(),
        email: Joi.string().email().required().pattern(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/), // Regex for email format
        password: Joi.string().min(6).max(30).required().pattern(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/), // Password with one letter and one digit
        addresses: Joi.array().items(addressSchema).min(1).required(),
        phone: Joi.string().min(10).max(15).pattern(/^[0-9]{10,15}$/), // Regex for phone with 10-15 digits
    });

    return schema.validate(data);
};

// Export both Mongoose Model and Joi Validation function

module.exports = {
    userModel:mongoose.model("user",userSchema),
    validateUser,
};
